// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum UserStatus {
  ACTIVE
  BLOCKED
  UNVERIFIED
}

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @unique @default(uuid()) @db.Uuid
  email               String      @unique
  name                String
  phoneNumber         String
  indentifyNumber     String      @unique
  addressWallet       String      @unique
  gender              String
  dateOfBirth         DateTime
  PIN                 String?
  emailVerifyToken    String?
  forgotPasswordToken String?
  refreshToken        String?
  userStatus          UserStatus? @default(UNVERIFIED)
  Role                Role?       @relation(fields: [roleId], references: [id])
  roleId              String?     @unique @db.Uuid
  createdAt           DateTime?   @default(now())
  updatedAt           DateTime?   @updatedAt
  createdBy           Json?
  updatedBy           Json?
  deletedAt           DateTime?
  deletedBy           Json?
}

model Role {
  id          String              @id @unique @default(uuid()) @db.Uuid
  name        String
  description String?
  isActive    Boolean?            @default(true)
  Permission  IncludePermission[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
  User        User[]
}

model Permission {
  id                String             @id @unique @default(uuid()) @db.Uuid
  name              String
  path              String
  method            String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdBy         Json?
  updatedBy         Json?
  deletedAt         DateTime?
  deletedBy         Json?
  IncludePermission IncludePermission?
}

model IncludePermission {
  id           String     @id @unique @default(uuid()) @db.Uuid
  Role         Role       @relation(fields: [roleId], references: [id])
  roleId       String     @unique @db.Uuid
  Permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @unique @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdBy    Json?
  updatedBy    Json?
  deletedAt    DateTime?
  deletedBy    Json?
}

model Constract {
  id              String    @id @unique @default(uuid()) @db.Uuid
  contractAddress String
  blockAddress    String
  gasPrice        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       Json?
  updatedBy       Json?
  deletedAt       DateTime?
  deletedBy       Json?
}

model ContractType {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String
  Parties     Parties[]
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
}

model Parties {
  id                 String        @id @unique @default(uuid()) @db.Uuid
  parytyName         String
  representativeName String
  taxCode            String
  position           String
  email              String
  indentifyNumber    String
  phoneNumber        String
  address            String
  PaymentMethod      PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  description        String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  createdBy          Json?
  updatedBy          Json?
  deletedAt          DateTime?
  deletedBy          Json?
  ContractType       ContractType? @relation(fields: [contractTypeId], references: [id])
  contractTypeId     String?       @unique @db.Uuid
  paymentMethodId    String        @unique @db.Uuid
}

model PaymentMethod {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String
  Banking     Banking?  @relation(fields: [idBankId], references: [id])
  idBankId    String?   @unique @db.Uuid
  Crypto      Crypto?   @relation(fields: [idCryptoId], references: [id])
  idCryptoId  String?   @unique @db.Uuid
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
  Parties     Parties[]
}

model Banking {
  id            String          @id @unique @default(uuid()) @db.Uuid
  accountName   String
  accountNo     String
  bankName      String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     Json?
  updatedBy     Json?
  deletedAt     DateTime?
  deletedBy     Json?
  PaymentMethod PaymentMethod[]
}

model Crypto {
  id            String          @id @unique @default(uuid()) @db.Uuid
  addressWallet String
  chainName     String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     Json?
  updatedBy     Json?
  deletedAt     DateTime?
  deletedBy     Json?
  PaymentMethod PaymentMethod[]
}
