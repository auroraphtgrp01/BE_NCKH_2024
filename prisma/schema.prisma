generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  UNVERIFIED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                  String      @id @unique @default(uuid()) @db.Uuid
  email               String      @unique
  name                String
  phoneNumber         String
  indentifyNumber     String      @unique
  addressWallet       String      @unique
  gender              Gender
  dateOfBirth         DateTime
  PIN                 String?
  emailVerifyToken    String?
  forgotPasswordToken String?
  refreshToken        String?
  userStatus          UserStatus? @default(UNVERIFIED)
  Role                Role?       @relation(fields: [roleId], references: [id])
  roleId              String?     @unique @db.Uuid
  createdAt           DateTime?   @default(now())
  updatedAt           DateTime?   @updatedAt
  createdBy           Json?
  updatedBy           Json?
  deletedAt           DateTime?
  deletedBy           Json?
  PartyInfo           PartyInfo[]
}

model Contract {
  id                     String                   @id @unique @default(uuid()) @db.Uuid
  contractTitle          String
  addressWallet          String
  contractAddress        String
  blockAddress           String
  gasPrices              Json[]                   @db.Json
  parties                Json[]                   @db.Json
  ContractAttributeValue ContractAttributeValue[]
  startDate              DateTime
  endDate                DateTime?
  executeDate            DateTime?
  agreements             String[]
  status                 contractStatus           @default(PENDING)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  createdBy              Json?
  updatedBy              Json?
  deletedAt              DateTime?
  deletedBy              Json?
  Invitation             Invitation[]
  contractAttribute      ContractAttribute[]
  ContractPartyInfo      ContractPartyInfo[]
}

model Invitation {
  id           String           @id @unique @default(uuid()) @db.Uuid
  idUserSender String           @db.Uuid
  email        String
  message      String
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime?        @updatedAt
  createdBy    Json?
  updatedBy    Json?
  deletedAt    DateTime?
  deletedBy    Json?
  Contract     Contract?        @relation(fields: [contractId], references: [id])
  contractId   String?          @db.Uuid
}

enum contractStatus {
  PENDING // chờ chấp nhận lời mời
  DEPLOYED // đã chấp nhận lời mời, đã deploy
  PROCESSING // đã gọi hàm ký, bắt đầu trong quá trình thực hiện hợp đồng
  CANCELED // thất bại ( 1 trong 2 bên huỷ hợp đồng )
  COMPLETED // hoàn thành hợp đồng
  LATED // hợp đồng quá hạn
  VIOLATED // hợp đồng bị vi phạm
}

model ContractAttribute {
  id                     String                   @id @unique @default(uuid()) @db.Uuid
  name                   String
  description            String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
  createdBy              Json?
  updatedBy              Json?
  deletedAt              DateTime?
  deletedBy              Json?
  ContractAttributeValue ContractAttributeValue[]
  Contract               Contract?                @relation(fields: [contractId], references: [id])
  contractId             String?                  @db.Uuid
}

model ContractAttributeValue {
  id                  String            @id @unique @default(uuid()) @db.Uuid
  contractAttribute   ContractAttribute @relation(fields: [contractAttributeId], references: [id])
  contractAttributeId String            @unique @db.Uuid
  contract            Contract          @relation(fields: [contractId], references: [id])
  contractId          String            @unique @db.Uuid
  value               String
  description         String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime?         @updatedAt
  createdBy           Json?
  updatedBy           Json?
  deletedAt           DateTime?
  deletedBy           Json?
}

model Parties {
  id              String         @id @unique @default(uuid()) @db.Uuid
  partyName       String         @unique
  taxCode         String         @unique
  email           String         @unique
  phoneNumber     String         @unique
  address         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  createdBy       Json?
  updatedBy       Json?
  deletedAt       DateTime?
  deletedBy       Json?
  PaymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?        @db.Uuid
  PartyInfo       PartyInfo[]
}

model PartyInfo {
  id                 String              @id @unique @default(uuid()) @db.Uuid
  representativeName String
  position           String
  userId             String              @db.Uuid
  User               User                @relation(fields: [userId], references: [id])
  phoneNumber        String              
  address            String
  description        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  createdBy          Json?
  updatedBy          Json?
  deletedAt          DateTime?
  deletedBy          Json?
  Parties            Parties             @relation(fields: [partiesId], references: [id])
  partiesId          String              @db.Uuid
  ContractPartyInfo  ContractPartyInfo[]
}

model ContractPartyInfo {
  id          String    @id @unique @default(uuid()) @db.Uuid
  Contract    Contract  @relation(fields: [contractId], references: [id])
  contractId  String    @db.Uuid
  PartyInfo   PartyInfo @relation(fields: [partyInfoId], references: [id])
  partyInfoId String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
}

model Role {
  id          String              @id @unique @default(uuid()) @db.Uuid
  name        String
  description String?
  isActive    Boolean?            @default(true)
  Permission  IncludePermission[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime?           @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
  User        User[]
}

model Permission {
  id                String              @id @unique @default(uuid()) @db.Uuid
  name              String
  path              String
  method            String
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  createdBy         Json?
  updatedBy         Json?
  deletedAt         DateTime?
  deletedBy         Json?
  IncludePermission IncludePermission[]
}

model IncludePermission {
  id           String     @id @unique @default(uuid()) @db.Uuid
  Role         Role       @relation(fields: [roleId], references: [id])
  roleId       String     @unique @db.Uuid
  Permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @unique @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  createdBy    Json?
  updatedBy    Json?
  deletedAt    DateTime?
  deletedBy    Json?
}

model PaymentMethod {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String
  Banking     Banking?  @relation(fields: [idBankId], references: [id])
  idBankId    String?   @unique @db.Uuid
  Crypto      Crypto?   @relation(fields: [idCryptoId], references: [id])
  idCryptoId  String?   @unique @db.Uuid
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
  Parties     Parties[]
}

model Banking {
  id            String          @id @unique @default(uuid()) @db.Uuid
  accountName   String
  accountNo     String
  bankName      String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  createdBy     Json?
  updatedBy     Json?
  deletedAt     DateTime?
  deletedBy     Json?
  PaymentMethod PaymentMethod[]
}

model Crypto {
  id            String          @id @unique @default(uuid()) @db.Uuid
  addressWallet String
  chainName     String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  createdBy     Json?
  updatedBy     Json?
  deletedAt     DateTime?
  deletedBy     Json?
  PaymentMethod PaymentMethod[]
}

model DeployStatus {
  id          String          @id @unique @default(uuid()) @db.Uuid
  status      DeployingStatus
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
}

enum DeployingStatus {
  PENDING
  DEPLOYED
  PROCESSING
  FAILED
}
