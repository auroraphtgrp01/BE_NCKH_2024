generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  UNVERIFIED
}

enum ParticipantStatus {
  PENDING
  ACCEPTED
  REFUSED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum contractStatus {
  PENDING // chờ chấp nhận lời mời
  PARTICIPATED // đã chấp nhận lời mời đầy đủ
  SIGNED // đã ký hợp đồng
  ENFORCE // đã deploy
  COMPLETED // hoàn thành hợp đồng
  FAILED // thất bại ( không thể thực hiện hợp đồng )
}

model User {
  id                  String       @id @unique @default(uuid()) @db.Uuid
  email               String       @unique
  name                String
  phoneNumber         String
  indentifyNumber     String       @unique
  addressWallet       String       @unique
  gender              Gender
  dateOfBirth         DateTime
  PIN                 String?
  emailVerifyToken    String?
  forgotPasswordToken String?
  refreshToken        String?
  userStatus          UserStatus?  @default(UNVERIFIED)
  role                String
  createdAt           DateTime?    @default(now())
  updatedAt           DateTime?    @updatedAt
  createdBy           Json?
  updatedBy           Json?
  deletedAt           DateTime?
  deletedBy           Json?
  Participant         Participant?
  Supplier            Suppliers[]
  Orders              Orders[]
}

model Participant {
  id         String            @id @unique @default(uuid()) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id])
  userId     String?           @unique @db.Uuid
  email      String
  permission Json
  contractId String            @db.Uuid
  Contract   Contract          @relation(fields: [contractId], references: [id])
  status     ParticipantStatus @default(PENDING)
  createdAt  DateTime?         @default(now())
  updatedAt  DateTime?         @updatedAt
  createdBy  Json?
  updatedBy  Json?
  deletedAt  DateTime?
  deletedBy  Json?
}

model Contract {
  id                String              @id @unique @default(uuid()) @db.Uuid
  contractTitle     String
  addressWallet     String
  contractAddress   String?
  blockAddress      String?
  gasPrices         Json[]              @db.Json
  startDate         DateTime?
  endDate           DateTime?
  executeDate       DateTime?
  agreements        String[]
  status            contractStatus      @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  createdBy         Json?
  updatedBy         Json?
  deletedAt         DateTime?
  deletedBy         Json?
  ContractAttribute ContractAttribute[]
  Participant       Participant[]
}

model TemplateContract {
  id                String              @id @unique @default(uuid()) @db.Uuid
  name              String
  path              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  createdBy         Json?
  updatedBy         Json?
  deletedAt         DateTime?
  deletedBy         Json?
  ContractAttribute ContractAttribute[]
}

model ContractAttribute {
  id                     String                  @id @unique @default(uuid()) @db.Uuid
  value                  String
  index                  Int?
  type                   String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime?               @updatedAt
  createdBy              Json?
  updatedBy              Json?
  deletedAt              DateTime?
  deletedBy              Json?
  Contract               Contract?               @relation(fields: [contractId], references: [id])
  contractId             String?                 @db.Uuid
  TemplateContract       TemplateContract?       @relation(fields: [templateContractId], references: [id])
  templateContractId     String?                 @db.Uuid
  ContractAttributeValue ContractAttributeValue?
}

model ContractAttributeValue {
  id                  String            @id @unique @default(uuid()) @db.Uuid
  value               String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime?         @updatedAt
  createdBy           Json?
  updatedBy           Json?
  deletedAt           DateTime?
  deletedBy           Json?
  ContractAttribute   ContractAttribute @relation(fields: [contractAttributeId], references: [id])
  contractAttributeId String            @unique @db.Uuid
}

model Roles {
  id          String              @id @unique @default(uuid()) @db.Uuid
  name        String              @unique
  description String?
  isActive    Boolean?            @default(true)
  Permission  IncludePermission[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime?           @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
}

model Permission {
  id                String              @id @unique @default(uuid()) @db.Uuid
  name              String
  path              String
  method            String
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
  createdBy         Json?
  updatedBy         Json?
  deletedAt         DateTime?
  deletedBy         Json?
  IncludePermission IncludePermission[]
}

model IncludePermission {
  id           String     @id @unique @default(uuid()) @db.Uuid
  Role         Roles      @relation(fields: [roleId], references: [id])
  roleId       String     @unique @db.Uuid
  Permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @unique @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  createdBy    Json?
  updatedBy    Json?
  deletedAt    DateTime?
  deletedBy    Json?
}

model Suppliers {
  id          String     @id @unique @default(uuid()) @db.Uuid
  name        String
  taxCode     String     @unique
  email       String     @unique
  phoneNumber String     @unique
  address     String
  Images      Images[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
  Products    Products[]
  User        User       @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid
  Orders      Orders[]
}

model Products {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String
  price       Float
  description String?
  Images      Images[]
  Suppliers   Suppliers @relation(fields: [suppliersId], references: [id])
  suppliersId String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
}

model Images {
  id          String     @id @unique @default(uuid()) @db.Uuid
  path        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
  Suppliers   Suppliers? @relation(fields: [suppliersId], references: [id])
  suppliersId String?    @db.Uuid
  Products    Products?  @relation(fields: [productsId], references: [id])
  productsId  String?    @db.Uuid
}

model Orders {
  id          String    @id @unique @default(uuid()) @db.Uuid
  orderCode   String    @unique
  status      String    @default("PENDING")
  products    Json[]
  Suppliers   Suppliers @relation(fields: [suppliersId], references: [id])
  suppliersId String    @db.Uuid
  userId      String    @db.Uuid
  User        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdBy   Json?
  updatedBy   Json?
  deletedAt   DateTime?
  deletedBy   Json?
}
